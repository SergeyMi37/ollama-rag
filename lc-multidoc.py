# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
# !pip install langchain langchain-community faiss-cpu ollama pypdf2 python-docx openpyxl xlrd > /dev/null

import os
from langchain.document_loaders import (
    DirectoryLoader,
    TextLoader,
    PyPDFLoader,
    Docx2txtLoader,
    UnstructuredExcelLoader,
    UnstructuredPowerPointLoader
)
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings.ollama import OllamaEmbeddings
from langchain.llms.ollama import OllamaLLM
from langchain.chains import RetrievalQA

class MultiFormatDocumentLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    
    def __init__(self, directory_path):
        self.directory_path = directory_path
        self.loaders_config = {
            '.txt': (TextLoader, {'encoding': 'utf-8'}),
            '.pdf': (PyPDFLoader, {}),
            '.docx': (Docx2txtLoader, {}),
            '.doc': (Docx2txtLoader, {}),  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö .doc —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            '.xlsx': (UnstructuredExcelLoader, {}),
            '.xls': (UnstructuredExcelLoader, {}),
            '.pptx': (UnstructuredPowerPointLoader, {}),
            '.ppt': (UnstructuredPowerPointLoader, {}),
            '.rtf': (TextLoader, {'encoding': 'utf-8'}),  # RTF –∫–∞–∫ —Ç–µ–∫—Å—Ç
        }
    
    def load_documents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        all_documents = []
        
        for extension, (loader_class, loader_args) in self.loaders_config.items():
            try:
                pattern = f"*{extension}"
                loader = DirectoryLoader(
                    self.directory_path, 
                    glob=pattern, 
                    loader_cls=loader_class,
                    loader_kwargs=loader_args,
                    silent_errors=True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
                )
                documents = loader.load()
                if documents:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents)} —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ {extension}")
                    all_documents.extend(documents)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ {extension}: {e}")
        
        if not all_documents:
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.directory_path}")
        
        return all_documents

def get_supported_formats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    formats = [
        ".txt - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã",
        ".pdf - PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã", 
        ".docx/.doc - –î–æ–∫—É–º–µ–Ω—Ç—ã Word",
        ".xlsx/.xls - –¢–∞–±–ª–∏—Ü—ã Excel",
        ".pptx/.ppt - –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ PowerPoint",
        ".rtf - Rich Text Format"
    ]
    return formats

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def main():
    print("üìö –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:")
    for fmt in get_supported_formats():
        print(f"  ‚Ä¢ {fmt}")
    print()
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    docs_directory = "docs/"  # –ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    
    if not os.path.exists(docs_directory):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {docs_directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'docs' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        return
    
    try:
        multi_loader = MultiFormatDocumentLoader(docs_directory)
        documents = multi_loader.load_documents()
        print(f"üìÇ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return

    # 2. –î–µ–ª–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —á–∞–Ω–∫–∏
    text_splitter = CharacterTextSplitter(
        chunk_size=1000, 
        chunk_overlap=100,
        separator="\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    )
    docs_chunks = text_splitter.split_documents(documents)
    print(f"‚úÇÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {len(docs_chunks)}")

    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama
    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...")
    try:
        embeddings = OllamaEmbeddings(model="nomic-embed-text")
        vector_store = FAISS.from_documents(docs_chunks, embedding=embeddings)
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–¥–µ–ª—å 'nomic-embed-text' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return

    # 4. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ç—Ä–∏–≤–µ—Ä
    retriever = vector_store.as_retriever(
        search_type="similarity", 
        search_kwargs={"k": 3}
    )

    # 5. –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM —á–µ—Ä–µ–∑ Ollama
    try:
        llm = OllamaLLM(model="llama3.1", temperature=0.1)  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            chain_type="stuff",
            retriever=retriever,
            return_source_documents=True  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        )
        print("‚úÖ –¶–µ–ø–æ—á–∫–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏ QA: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–¥–µ–ª—å 'llama3.1' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return

    # 6. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    print("\n" + "="*60)
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit' –∏–ª–∏ 'exit'")
    print("="*60)
    
    while True:
        try:
            query = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if query.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not query:
                continue
            
            print("üîé –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
            result = qa_chain({"query": query})
            
            print("\nüí° –û—Ç–≤–µ—Ç:")
            print(result["result"])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if result["source_documents"]:
                print("\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
                for i, doc in enumerate(result["source_documents"][:3], 1):
                    source = doc.metadata.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    page = doc.metadata.get('page', 'N/A')
                    print(f"  {i}. –§–∞–π–ª: {os.path.basename(source)} (–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page})")
                    
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
# üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:
# Windows & RHEL (–æ–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏):
# bash
# # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
# pip install pypdf2 python-docx openpyxl xlrd unstructured

# # –î–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# pip install "unstructured[pdf]" "unstructured[docx]" "unstructured[xlsx]"

# # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
# pip install unstructured-inference
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è RHEL:
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –≤ RHEL –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

# bash
# # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ RHEL
# sudo yum install -y poppler-utils  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
# sudo yum install -y libjpeg-turbo-devel  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
# sudo yum install -y python3-devel  # –î–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Python-–ø–∞–∫–µ—Ç–æ–≤

# # –ò–ª–∏ –¥–ª—è RHEL 8+ —Å dnf:
# sudo dnf install -y poppler-utils libjpeg-turbo-devel python3-devel
# üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: PDF, DOC/DOCX, XLS/XLSX, PPT/PPTX, RTF, TXT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã

# –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å multiple questions –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

# –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –£–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑ –∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

# –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
# –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:

# python
# # test_dependencies.py
# try:
#     import PyPDF2
#     import docx
#     import openpyxl
#     import langchain
#     import ollama
#     print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
# except ImportError as e:
#     print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
# –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ RAG-—Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤!

